# Copyright Â© Magento, Inc. All rights reserved.
# See COPYING.txt for license details.
type Mutation {
    sendOtpToCustomer(resend: Int!, storeId: Int!, mobile: String!, eventType: String!): CustomerToken @resolver(class: "\\Magedelight\\SMSProfile\\Model\\Resolver\\SendOtpToCustomer") @doc(description:"Retrieve the customer")
    createCustomerTokenWithOtp(mobile: String!, otp: String!, websiteId: Int!): CustomerTokenWithOtp @resolver(class: "\\Magedelight\\SMSProfile\\Model\\Resolver\\CreateCustomerTokenWithOtp") @doc(description:"Create Customer Token With OTP")
    createCustomerTokenWithOtpPassword(mobile: String!, otp: String!, password: String!, websiteId: Int!): CustomerTokenWithOtpPassword @resolver(class: "\\Magedelight\\SMSProfile\\Model\\Resolver\\CreateCustomerTokenWithOtpPassword") @doc(description:"Create Customer Token With OTP")
    initiatePasswordResetWithOTP(mobile: String!, otp: String!, template: String!, websiteId: Int!) : PasswordResetWithOTP @resolver(class: "\\Magedelight\\SMSProfile\\Model\\Resolver\\InitiatePasswordResetWithOTP") @doc(description:"Create Customer Token With OTP")
    savePaymentInformationAndPlaceOrderWithOtp(paymentInformation: PaymentInformation!, guestCartId: String, emailId: String!, mobile: String!, otp: String!): OrderIdObject @resolver(class: "\\Magedelight\\SMSProfile\\Model\\Resolver\\SavePaymentInformationAndPlaceOrderWithOtp") @doc(description:"Set Payment Informations And Place Order")
    savePaymentInformationAndPlaceOrderWithOtpForCustomer(paymentInformation: PaymentInformation!, cartId: String, mobile: String!, otp: String!): OrderIdObject @resolver(class: "\\Magedelight\\SMSProfile\\Model\\Resolver\\SavePaymentInformationAndPlaceOrderWithOtpForCustomer") @doc(description:"Set Payment Informations And Place Order")
    createCustomerWithOtp (input: CustomerInput!, password: String!, mobile: String!, otp: String!): CustomerOutput @resolver(class: "\\Magedelight\\SMSProfile\\Model\\Resolver\\CreateAccountWithOtp") @doc(description:"Create customer account")
    updateCustomerWithOtp (input: CustomerInput!, password: String!, mobile: String!, otp: String!, websiteId: Int!): CustomerOutput @resolver(class: "\\Magedelight\\SMSProfile\\Model\\Resolver\\UpdateAccountWithOtp") @doc(description:"Update the customer's personal information")
}

type CustomerToken {
    message: String @doc(description: "Success or error Message")
}

type CustomerTokenWithOtp {
    message: String @doc(description: "Success or error Message")
    token: String @doc (description: "Token")
}

type CustomerTokenWithOtpPassword {
    message: String @doc(description: "Success or error Message")
    token: String @doc (description: "Token")
}

type AccountWithOtp {
    message: String @doc(description: "Success or error Message")
}

type PasswordResetWithOTP {
    message: String @doc(description: "Success or error Message")
}

type PaymentInformationAndPlaceOrderWithOtp {
    message: String @doc(description: "Success or error Message")
}

type OrderIdObject {
    orderId: String
}

input PaymentInformation {
    billing_address: AddressInput!
    paymentMethod: PaymentMethodString!
}

input AddressInput {
    method: String
    region: String
    region_id: Int
    region_code: String
    country_id: String
    postcode: String
    city: String
    firstname: String
    lastname: String
    email: String
    telephone: String
    company: String
    street: [String]
}

input PaymentMethodString {
    method: String
}

input CustomerInput {
    prefix: String @doc(description: "An honorific, such as Dr., Mr., or Mrs.")
    firstname: String @doc(description: "The customer's first name")
    middlename: String @doc(description: "The customer's middle name")
    lastname: String @doc(description: "The customer's family name")
    suffix: String @doc(description: "A value such as Sr., Jr., or III")
    email: String @doc(description: "The customer's email address. Required")
    dob: String @doc(description: "The customer's date of birth")
    taxvat: String @doc(description: "The customer's Tax/VAT number (for corporate customers)")
    gender: Int @doc(description: "The customer's gender(Male - 1, Female - 2)")
    password: String @doc(description: "The customer's password")
    is_subscribed: Boolean @doc(description: "Indicates whether the customer is subscribed to the company's newsletter")
}

type CustomerOutput {
    customer: Customer!
    token: String @doc(description: "token")
}

type Customer @doc(description: "Customer defines the customer name and address and other details") {
    created_at: String @doc(description: "Timestamp indicating when the account was created")
    group_id: Int @doc(description: "The group assigned to the user. Default values are 0 (Not logged in), 1 (General), 2 (Wholesale), and 3 (Retailer)")
    prefix: String @doc(description: "An honorific, such as Dr., Mr., or Mrs.")
    firstname: String @doc(description: "The customer's first name")
    middlename: String @doc(description: "The customer's middle name")
    lastname: String @doc(description: "The customer's family name")
    suffix: String @doc(description: "A value such as Sr., Jr., or III")
    email: String @doc(description: "The customer's email address. Required")
    default_billing: String @doc(description: "The ID assigned to the billing address")
    default_shipping: String @doc(description: "The ID assigned to the shipping address")
    dob: String @doc(description: "The customer's date of birth")
    taxvat: String @doc(description: "The customer's Tax/VAT number (for corporate customers)")
    id: Int @doc(description: "The ID assigned to the customer")
    is_subscribed: Boolean @doc(description: "Indicates whether the customer is subscribed to the company's newsletter") @resolver(class: "\\Magento\\CustomerGraphQl\\Model\\Resolver\\IsSubscribed")
    addresses: [CustomerAddress] @doc(description: "An array containing the customer's shipping and billing addresses") @resolver(class: "\\Magento\\CustomerGraphQl\\Model\\Resolver\\CustomerAddresses")
    gender: Int @doc(description: "The customer's gender(Male - 1, Female - 2)")
}

type CustomerAddress @doc(description: "CustomerAddress contains detailed information about a customer's billing and shipping addresses"){
    id: Int @doc(description: "The ID assigned to the address object")
    customer_id: Int @doc(description: "The customer ID")
    region: CustomerAddressRegion @doc(description: "An object containing the region name, region code, and region ID")
    region_id: Int @doc(description: "A number that uniquely identifies the state, province, or other area")
    country_id: String @doc(description: "The customer's country")
    street: [String] @doc(description: "An array of strings that define the street number and name")
    company: String @doc(description: "The customer's company")
    telephone: String @doc(description: "The telephone number")
    fax: String @doc(description: "The fax number")
    postcode: String @doc(description: "The customer's ZIP or postal code")
    city: String @doc(description: "The city or town")
    firstname: String @doc(description: "The first name of the person associated with the shipping/billing address")
    lastname: String @doc(description: "The family name of the person associated with the shipping/billing address")
    middlename: String @doc(description: "The middle name of the person associated with the shipping/billing address")
    prefix: String @doc(description: "An honorific, such as Dr., Mr., or Mrs.")
    suffix: String @doc(description: "A value such as Sr., Jr., or III")
    vat_id: String @doc(description: "The customer's Tax/VAT number (for corporate customers)")
    default_shipping: Boolean @doc(description: "Indicates whether the address is the default shipping address")
    default_billing: Boolean @doc(description: "Indicates whether the address is the default billing address")
    custom_attributes: [CustomerAddressAttribute] @doc(description: "Address custom attributes")
    extension_attributes: [CustomerAddressAttribute] @doc(description: "Address extension attributes")
}

type CustomerAddressAttribute {
    attribute_code: String @doc(description: "Attribute code")
    value: String @doc(description: "Attribute value")
}

type CustomerAddressRegion @doc(description: "CustomerAddressRegion defines the customer's state or province") {
    region_code: String @doc(description: "The address region code")
    region: String @doc(description: "The state or province name")
    region_id: Int @doc(description: "Uniquely identifies the region")
}
